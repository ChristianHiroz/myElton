<?php

namespace Elton\PaymentBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * PCodeRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PCodeRepository extends EntityRepository
{
    /**
     * Function that verify PCode correspondance with postalCode of the school
     * @param string $pcode code of the pcode     
     * @param string $codep postalCode of the school
     * @return bool
     */
    public function getPCodeInSchool($pcode, $codep)
    {
        
        $em = $this->getEntityManager();
        $query = $em->createQuery(
                'Select p
                From EltonPaymentBundle:PCode p
                Where p.code = ?1
                AND p.postalCode = ?2');
        $query->setParameter(1, $pcode);        
        $query->setParameter(2, $codep);
        $result = $query->getResult();
        
        if(empty($result)){
            $codep = substr($codep, 0, 4);
            $codep = $codep . "X";
            $query = $em->createQuery(
                'Select p
                From EltonPaymentBundle:PCode p
                Where p.code = ?1
                AND p.postalCode = ?2');
            $query->setParameter(1, $pcode);        
            $query->setParameter(2, $codep);
            $result = $query->getResult();
        }
        
        if(empty($result)){
            $codep = substr($codep, 0, 3);
            $codep += "XX"; 
            $query = $em->createQuery(
                'Select p
                From EltonPaymentBundle:PCode p
                Where p.code = ?1
                AND p.postalCode = ?2');
            $query->setParameter(1, $pcode);        
            $query->setParameter(2, $codep);
            $result = $query->getResult();
        }
        
        if(empty($result)){
            $codep = substr($codep, 0, 2);
            $codep += "XXX"; 
            $query = $em->createQuery(
                'Select p
                From EltonPaymentBundle:PCode p
                Where p.code = ?1
                AND p.postalCode = ?2');
            $query->setParameter(1, $pcode);        
            $query->setParameter(2, $codep);
            $result = $query->getResult();
        }
        
        return $result;
    }
    
    /**
     * Function that verify PCode activity
     * @param int $pcode code of the pcode     
     * @return bool
     */
    public function isPCodeActive($pcode)
    {
        //$level = (int)$level;
        $em = $this->getEntityManager();
        $query = $em->createQuery(
                'Select o
                From EltonPaymentBundle:Offer o
                Where o.code = ?1
                AND p.');
        $query->setParameter(1, $pcode);    
        $result = $query->getResult();
        
        return $result;
    }
}
